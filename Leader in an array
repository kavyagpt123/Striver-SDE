Leader in an array
Leader in an array:
Better approach:
-In this approach we simply check all element starting to the end of the array it is greater than all the right element of the array. If it is greater than make the starting element a s leader.
- For this we will use  nested loop outer loop simply pick one element and check it is leader or not.
- Inner loop check it's all right element . it is greater than current element of the outer loop. 
- Outer loop simply check starting element as current to the end .
- In the inner loop if there is any element which is greater than current element than current element will not make as leader and 
  increment the outer loop by 1 and next element set as current element.
- If we did not find any element in inner loop which is greater than the current element than push the current element into leaders array.
class Solution {
    // Function to find the leaders in the array.
  public:
    vector<int> leaders(vector<int>& arr) {
    vector<int>ans;
    for(int i=0;i<arr.size();i++){
         bool leader=true;
          for(int j=i+1;j<arr.size();j++){
             if(arr[j]>arr[i])
                leader=false;
                   break;
            }
           if(leader)
           ans.push_back(arr[i]);
    }
    return ans;
}
};

2- Optimal approach:
   - In this approach we simply run only one loop . We run this loop from the right sight to left . Whatever  we encounter the new element  we check with  greatest element  is obtain  so far.
 - If current element is greater than the greatest element than push it into ans array and make it as greatest element.
- else we will proceed with further element on the left. This approach will print all the leaders in reverse direction. then we simply reverse the ans array.
class Solution {
    // Function to find the leaders in the array.
  public:
    vector<int> leaders(vector<int>& arr) {
    vector<int>ans;
     int greatest = arr[n-1];
    for(int i=(n-2);i>=0;i--)
     {
        if(arr[i]>greatest){
       ans.push_back(arr[i]);
       greatest=arr[i];
  }
} 
   reverse(ans.begin(),ans.end());
   return ans;
}
};
